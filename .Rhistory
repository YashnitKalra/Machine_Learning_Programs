# creating model
y=training_data$medv;
x=training_data$lstat;
myModel=lm(y~x);
# predicting
data=data.frame(x=testing_data$lstat);
result=predict(myModel,data)
# plotting
par(mfrow=c(1,2));
plot(testing_data$medv,result);
plot(testing_data$lstat,testing_data$medv)
detach("package:datasets", unload = TRUE)
library(datasets, lib.loc = "C:/Program Files/R/R-3.6.2/library")
.libPaths()
myPaths <- .libPaths()   # get the paths
myPaths <- c(myPaths[2], myPaths[1])  # switch them
.libPaths(myPaths)  # reassign them
.libPaths()
myPaths <- .libPaths()   # get the paths
myPaths <- c(myPaths[2], myPaths[1])  # switch them
.libPaths(myPaths)  # reassign them
install.packages("MASS", lib="C:/Program Files/R/R-3.6.2/library")
library(MASS)
Boston
library(MASS)
set.seed(5)
split=sample.split(Boston$medv,SplitRatio = 0.7)
training_set = subset(Boston$medv, split == TRUE)
testing_set = subset(Boston$medv, split == FALSE)
library(MASS)
set.seed(555)
split=sample.split(Boston$medv,SplitRatio = 0.7)
training_set = subset(Boston$medv, split == TRUE)
testing_set = subset(Boston$medv, split == FALSE)
library(MASS)
set.seed(555)
split=sample.split(Boston$medv,SplitRatio = 0.7)
library(MASS)
library(caret)
set.seed(555)
split=sample.split(Boston$medv,SplitRatio = 0.7)
training_set = subset(Boston$medv, split == TRUE)
testing_set = subset(Boston$medv, split == FALSE)
library(MASS)
library(caTools)
set.seed(555)
split=sample.split(Boston$medv,SplitRatio = 0.7)
training_set = subset(Boston$medv, split == TRUE)
testing_set = subset(Boston$medv, split == FALSE)
library(MASS)
library(caTools)
set.seed(555)
split=sample.split(Boston$medv,SplitRatio = 0.7)
training_set = subset(Boston$medv, split == TRUE)
testing_set = subset(Boston$medv, split == FALSE)
training_set
library(MASS)
library(caTools)
set.seed(555)
split=sample.split(Boston$medv,SplitRatio = 0.7)
training_set = subset(Boston$medv, split == TRUE)
testing_set = subset(Boston$medv, split == FALSE)
training_set
testing_set
colnames(Boston)
colnames(Boston[-7])
library(MASS)
library(caTools)
set.seed(555)
split=sample.split(Boston[-7]$medv,SplitRatio = 0.7)
training_set = subset(Boston[-7]$medv, split == TRUE)
testing_set = subset(Boston[-7]$medv, split == FALSE)
library(MASS)
library(caTools)
set.seed(555)
split=sample.split(Boston[-7]$medv,SplitRatio = 0.7)
training_set = subset(Boston[-7]$medv, split == TRUE)
testing_set = subset(Boston[-7]$medv, split == FALSE)
training_set
library(MASS)
library(caTools)
set.seed(555)
split=sample.split(Boston[-7]$medv,SplitRatio = 0.7)
training_set = subset(Boston[-7]$medv, split == TRUE)
testing_set = subset(Boston[-7]$medv, split == FALSE)
training_set$medv
library(MASS)
library(caTools)
set.seed(5)
split=sample.split(Boston$medv,SplitRatio = 0.7)
training_set = subset(Boston[-7], split == TRUE)
testing_set = subset(Boston[-7], split == FALSE)
training_set
library(MASS)
library(caTools)
set.seed(5)
split=sample.split(Boston$medv,SplitRatio = 0.5)
training_set = subset(Boston[-7], split == TRUE)
testing_set = subset(Boston[-7], split == FALSE)
myModel=lm(training_set$medv~.,data=training_set)
library(MASS)
library(caTools)
set.seed(5)
split=sample.split(Boston$medv,SplitRatio = 0.5)
training_set = subset(Boston[-7], split == TRUE)
testing_set = subset(Boston[-7], split == FALSE)
myModel=lm(training_set$medv~.,data=training_set)
predictions=predict(myModel,testing_set)
library(MASS)
library(caTools)
set.seed(5)
split=sample.split(Boston$medv,SplitRatio = 0.5)
training_set = subset(Boston[-7], split == TRUE)
testing_set = subset(Boston[-7], split == FALSE)
myModel=lm(training_set$medv~.,data=training_set)
predictions=predict(myModel,testing_set)
predictions
library(MASS)
library(caTools)
set.seed(5)
split=sample.split(Boston$medv,SplitRatio = 0.5)
training_set = subset(Boston[-7], split == TRUE)
testing_set = subset(Boston[-7], split == FALSE)
myModel=lm(training_set$medv~.,data=training_set)
predictions=predict(myModel,testing_set)
predictions
testing_set
library(MASS)
library(caTools)
set.seed(5)
split=sample.split(Boston$medv,SplitRatio = 0.5)
training_set = subset(Boston[-7], split == TRUE)
testing_set = subset(Boston[-7], split == FALSE)
myModel=lm(training_set$medv~.,data=training_set)
predictions=predict(myModel,testing_set)
confusionMatrix(predictions,testing_set$medv)
library(MASS)
library(caTools)
set.seed(5)
split=sample.split(Boston$medv,SplitRatio = 0.5)
training_set = subset(Boston[-7], split == TRUE)
testing_set = subset(Boston[-7], split == FALSE)
myModel=lm(training_set$medv~.,data=training_set)
predictions=predict(myModel,testing_set)
library(MASS)
library(caTools)
set.seed(5)
split=sample.split(Boston$medv,SplitRatio = 0.5)
training_set = subset(Boston[-7], split == TRUE)
testing_set = subset(Boston[-7], split == FALSE)
myModel=lm(training_set$medv~.,data=training_set)
predictions=predict(myModel,testing_set)
library(MASS)
library(caTools)
set.seed(5)
split=sample.split(Boston$medv,SplitRatio = 0.5)
training_set = subset(Boston[-7], split == TRUE)
testing_set = subset(Boston[-7], split == FALSE)
myModel=lm(training_set$medv~.,data=training_set)
predictions=predict(myModel,testing_set)
mean((testing_set$medv-predictions)**2)
summary(myModel)
str(myModel)
library(MASS)
library(caTools)
set.seed(5)
split=sample.split(Boston$medv,SplitRatio = 0.5)
training_set = subset(Boston[-7], split == TRUE)
testing_set = subset(Boston[-7], split == FALSE)
myModel=lm(training_set$medv~.,data=training_set)
predictions=predict(myModel,testing_set)
mean((testing_set$medv-predictions)**2)**0.5
df=iris
df=iris
tail(df)
df=iris
tail(df,100)
df=tail(iris,100)
df[0]
df=tail(iris,100)
df[1]
df=tail(iris,100)
rownames(df)=NULL
df=tail(iris,100)
rownames(df)=NULL
df
?sample.split
library(caTools)
df=tail(iris,100)
set.seed(5)
split=sample.split(df$Species,0.5)
training_set=df[split==TRUE]
library(caTools)
df=tail(iris,100)
set.seed(5)
split=sample.split(df$Species,0.5)
training_set=subset(df,split==TRUE)
testing_set=subset(df,split==FALSE)
training_set
library(caTools)
df=tail(iris,100)
set.seed(5)
split=sample.split(df$Species,0.5)
training_set=subset(df,split==TRUE)
testing_set=subset(df,split==FALSE)
rownames(training_set)=NULL
training_set
library(caTools)
df=tail(iris,100)
set.seed(5)
split=sample.split(df$Species,0.5)
training_set=subset(df,split==TRUE)
testing_set=subset(df,split==FALSE)
df$Species
library(caTools)
df=tail(iris,100)
set.seed(5)
split=sample.split(df$Species,0.5)
training_set=subset(df,split==TRUE)
testing_set=subset(df,split==FALSE)
training_set$Species
library(caTools)
df=tail(iris,100)
set.seed(5)
split=sample.split(df$Species,0.5)
training_set=subset(df,split==TRUE)
testing_set=subset(df,split==FALSE)
training_set$Species=='setosa'
library(caTools)
df=tail(iris,100)
set.seed(5)
split=sample.split(df$Species,0.5)
training_set=subset(df,split==TRUE)
testing_set=subset(df,split==FALSE)
sum(training_set$Species=='setosa')
library(caTools)
df=tail(iris,100)
set.seed(5)
split=sample.split(df$Species,0.5)
training_set=subset(df,split==TRUE)
testing_set=subset(df,split==FALSE)
sum(training_set$Species=='versicolor')
library(caTools)
df=tail(iris,100)
set.seed(5)
split=sample.split(df$Species,0.5)
training_set=subset(df,split==TRUE)
testing_set=subset(df,split==FALSE)
myModel=glm(Species~.,data=training_set)
library(caTools)
df=tail(iris,100)
set.seed(5)
split=sample.split(df$Species,0.5)
training_set=subset(df,split==TRUE)
testing_set=subset(df,split==FALSE)
myModel=glm(training_set$Species~.,data=training_set)
library(caTools)
df=tail(iris,100)
set.seed(5)
split=sample.split(df$Species,0.5)
training_set=subset(df,split==TRUE)
testing_set=subset(df,split==FALSE)
myModel=glm(training_set$Species~.,data=training_set)
as.numeric(df$Species)
library(caTools)
df=tail(iris,100)
set.seed(5)
split=sample.split(df$Species,0.5)
training_set=subset(df,split==TRUE)
testing_set=subset(df,split==FALSE)
myModel=glm(training_set$Species~.,data=training_set)
as.numeric(df$Species)
df$Species=="versicolor"
library(caTools)
df=tail(iris,100)
set.seed(5)
split=sample.split(df$Species,0.5)
training_set=subset(df,split==TRUE)
testing_set=subset(df,split==FALSE)
myModel=glm(training_set$Species~.,data=training_set)
as.numeric(df$Species)
library(caTools)
df=tail(iris,100)
set.seed(5)
split=sample.split(df$Species,0.5)
training_set=subset(df,split==TRUE)
testing_set=subset(df,split==FALSE)
myModel=glm(training_set$Species~.,data=training_set)
as.numeric(df$Species)-2
library(caTools)
df=tail(iris,100)
set.seed(5)
split=sample.split(df$Species,0.5)
training_set=subset(df,split==TRUE)
testing_set=subset(df,split==FALSE)
myModel=glm(training_set$Species~.,data=training_set)
df$Species=as.numeric(df$Species)-2
df
library(caTools)
df=tail(iris,100)
set.seed(5)
split=sample.split(df$Species,0.5)
training_set=subset(df,split==TRUE)
testing_set=subset(df,split==FALSE)
myModel=glm(training_set$Species~.,data=training_set)
replace(df$Species,df$Species=="versicolor",1)
replace(df$Species,df$Species=="versicolor",1)
replace(df$Species,df$Species=="versicolor",1)
library(caTools)
df=tail(iris,100)
set.seed(5)
split=sample.split(df$Species,0.5)
training_set=subset(df,split==TRUE)
testing_set=subset(df,split==FALSE)
myModel=glm(training_set$Species~.,data=training_set)
replace(df$Species,df$Species=="versicolor",rep(1,50))
myModel=glm(training_set$Species~.,data=training_set)
df=tail(iris,100)
replace(df$Species,df$Species=="versicolor",rep(1,50))
library(caTools)
df=tail(iris,100)
df$Species[df$Species=='versicolor']=0
df
set.seed(5)
split=sample.split(df$Species,0.5)
training_set=subset(df,split==TRUE)
testing_set=subset(df,split==FALSE)
myModel=glm(training_set$Species~.,data=training_set)
df=tail(iris,100)
df$Species[df$Species=='versicolor']=0
df=tail(iris,100)
df$Species[df$Species=='versicolor']=1
levels(df)
levels(df$Species)
levels(df$Species)=c(0,1)
levels(df$Species)=c(0,1,2)
df$Species[df$Species=='versicolor']=1
df
df=tail(iris,100)
levels(df$Species)=c(0,1,2)
df
levels(df$Species)=c(2,0,1)
df=tail(iris,100)
levels(df$Species)
df$Species=factor(df$Species)
levels(df$Species)
levels(df$Species)=c(0,1)
# versicolor = 0, verginica = 1
df
set.seed(5)
split=sample.split(df$Species,0.5)
training_set=subset(df,split==TRUE)
testing_set=subset(df,split==FALSE)
myModel=glm(training_set$Species~.,data=training_set)
myModel=glm(training_set$Species~.,data=training_set,family = binomial)
summary(glm)
summary(myModel)
?predict
predictions=predict(glm,testing_set)
# versicolor = 0, verginica = 1
df
predictions=predict(glm,testing_set[-5])
predictions=predict(glm,testing_set)
predictions=predict(myModel,testing_set)
predictions
myModel=glm(Species~.,data=training_set,family = binomial)
predictions=predict(myModel,testing_set)
predictions
predictions=predict(myModel,testing_set[-5])
predictions
predictions=predict(myModel,testing_set[-4])
predictions=predict(myModel,testing_set)
predictions
summary(myModel)
df=tail(iris,100)
split=sample.split(df$Species,0.5)
training_set=subset(df,split==TRUE)
testing_set=subset(df,split==FALSE)
myModel=glm(Species~.,data=training_set,family = binomial)
df$Species=factor(df$Species)
levels(df$Species)=c(0,1)
# versicolor = 0, verginica = 1
df
training_set=subset(df,split==TRUE)
testing_set=subset(df,split==FALSE)
myModel=glm(Species~.,data=training_set,family = binomial)
set.seed(5)
split=sample.split(df$Species,0.5)
training_set=subset(df,split==TRUE)
testing_set=subset(df,split==FALSE)
myModel=glm(Species~.,data=training_set,family = binomial)
summary(myModel)
predictions=predict(myModel,testing_set)
predictions
?glm
testing_set$Species
library(caTools)
df=tail(iris,100)
df$Species=factor(df$Species) # to set level to ("versicolor,"verginica") else ("setosa","versicolor","verginica")
levels(df$Species)=c(0,1)
# versicolor = 0, verginica = 1
df
set.seed(5)
split=sample.split(df$Species,0.5)
training_set=subset(df,split==TRUE)
testing_set=subset(df,split==FALSE)
myModel=glm(Species~.,data=training_set,family = binomial)
summary(myModel)
predictions=predict(myModel,testing_set)
predictions
testing_set$Species
summary(myModel)
predictions=predict(myModel.fit,testing_set)
predictions=predict(glm.fit,testing_set)
predictions=predict(myModel,testing_set)
predictions=predict(myModel,testing_set,type = "response")
predictions
predictions[140]
predictions[140,]
predictions
predictions[1]
predictions[48]
testing_set$Species
predictions
testing_set$Species
table(predcitions)
table(predictions)
table(testing_set$Species)
round(predictions,digits = 0)
confusionMatrix()
confusionMatrix(round(predictions,digits = 0),testing_set$Species)
library(e1071)
confusionMatrix(round(predictions,digits = 0),testing_set$Species)
library(caret)
confusionMatrix(round(predictions,digits = 0),testing_set$Species)
confusionMatrix(as.factor(round(predictions,digits = 0)),testing_set$Species)
cm[1]
cm
cm
cm$overall
cm=confusionMatrix(as.factor(round(predictions,digits = 0)),testing_set$Species)
cm$overall
cm
cm$overall
cm$overall[1]
cm=confusionMatrix(as.factor(round(predictions,digits = 0)),testing_set$Species)
cm$overall[1]
testing_set$Species
predictions
testing_set$Species
predictions=as.factor(predict(myModel,testing_set,type = "response"))
predictions
predictions=predict(myModel,testing_set,type = "response")
predictions
testing_set$Species
cm=confusionMatrix(as.factor(round(predictions,digits = 0)),testing_set$Species)
cm
cm$table
cm=confusionMatrix(as.factor(round(predictions,digits = 0)),testing_set$Species)
cm$table
cm$overall[1]
library(caTools)
library(caret)
df=tail(iris,100)
df$Species=factor(df$Species) # to set level to ("versicolor,"verginica") else ("setosa","versicolor","verginica")
levels(df$Species)=c(0,1)
# versicolor = 0, verginica = 1
df
set.seed(5)
split=sample.split(df$Species,0.5)
training_set=subset(df,split==TRUE)
testing_set=subset(df,split==FALSE)
myModel=glm(Species~.,data=training_set,family = binomial)
summary(myModel)
predictions=predict(myModel,testing_set,type = "response")
predictions
testing_set$Species
cm=confusionMatrix(as.factor(round(predictions,digits = 0)),testing_set$Species)
cm$table
cm$overall[1]
predictions
testing_set$Species
cm=confusionMatrix(as.factor(round(predictions,digits = 0)),testing_set$Species)
cm$table
cm$overall[1]
# Training ANN with 2 hidden layers with 5 and 3 nodes on hidden layers respectively
install.packages("neuralnet",dependencies = TRUE)
install.packages("neuralnet", lib="C:/Program Files/R/R-3.6.2/library")
# Load Data
library(MASS)
data <- Boston
maxs <- apply(data, 2, max)
mins <- apply(data, 2, min)
scaled <- as.data.frame(scale(data, center = mins, scale = maxs - mins))
# Split data for training and testing
index <- sample(1:nrow(data),round(0.75*nrow(data)))
train_ <- scaled[index,]
test_ <- scaled[-index,]
# Training ANN with 2 hidden layers with 5 and 3 nodes on hidden layers respectively
# install.packages("neuralnet",dependencies = TRUE)
library(neuralnet)
nn <- neuralnet(medv ~ .,data=train_,act.fct = "logistic",hidden=c(5,3),linear.output=T)
nn2 <- neuralnet(medv ~ .,data=train_)
plot(nn) # Plotting ANN
plot(nn2)
# Testing NN
pr.nn <- compute(nn,test_[,1:13])
pr.nn_ <- pr.nn$net.result*(max(data$medv)-min(data$medv))+min(data$medv)
test.r <- (test_$medv)*(max(data$medv)-min(data$medv))+min(data$medv)
MSE.nn <- sum((test.r - pr.nn_)^2)/nrow(test_)
#visualizing the performance of the network
plot(test_$medv,pr.nn_,main='Real vs predicted NN')
