#speed_normalized
#dist_normalized
plot(speed,dist,col="red")
thetas=predictTheta(speed,dist)
d=thetas[1]+15.5*thetas[2]
thetas
predicted_dist=thetas[1]+(speed*thetas[2])
points(speed,predicted_dist,type="o",col="blue")
#predicted_dist
print(c("Predicted distance for speed 15.5 mph:",d))
predictTheta=function(x,y){
print(cov(x,y))
print(var(y))
theta_1=cov(x,y)/var(x)
theta_0=mean(y)-theta_1*mean(x)
return(c(theta_0,theta_1))
}
speed=cars[[1]]
dist=cars[[2]]
speed_normalized=(speed-mean(speed))/(max(speed)-min(speed))
dist_normalized=(dist-mean(dist))/(max(dist)-min(dist))
#speed_normalized
#dist_normalized
plot(speed,dist,col="red")
thetas=predictTheta(speed,dist)
d=thetas[1]+15.5*thetas[2]
thetas
predicted_dist=thetas[1]+(speed*thetas[2])
points(speed,predicted_dist,type="o",col="blue")
#predicted_dist
print(c("Predicted distance for speed 15.5 mph:",d))
predictTheta=function(x,y){
theta_1=cov(x,y)/var(x)
theta_0=mean(y)-theta_1*mean(x)
return(c(theta_0,theta_1))
}
speed=cars[[1]]
dist=cars[[2]]
speed_normalized=(speed-mean(speed))/(max(speed)-min(speed))
dist_normalized=(dist-mean(dist))/(max(dist)-min(dist))
#speed_normalized
#dist_normalized
plot(speed,dist,col="red")
thetas=predictTheta(speed,dist)
d=thetas[1]+15.5*thetas[2]
thetas
predicted_dist=thetas[1]+(speed*thetas[2])
points(speed,predicted_dist,type="o",col="blue")
#predicted_dist
print(c("Predicted distance for speed 15.5 mph:",d))
df=read.csv("linear_regression_data.csv")
result=function(x,y,x_input){
theta_1=cov(x,y)/var(x)
theta_0=mean(y)-theta_1*mean(x)
theta_0+theta_1*x_input
}
plot(df[['x']],df[['y']])
result(df[['x']],df[['y']],10)
predicted_y=c()
for(x in df[['x']]){
predicted_y=c(predicted_y,result(df[['x']],df[['y']],x))
}
# for adding data to plot
points(df[['x']],predicted_y,type="o")
predictTheta=function(x,y){
theta_1=cov(x,y)/var(x)
theta_0=mean(y)-theta_1*mean(x)
return(c(theta_0,theta_1))
}
speed=cars[[1]]
dist=cars[[2]]
speed_normalized=(speed-mean(speed))/(max(speed)-min(speed))
dist_normalized=(dist-mean(dist))/(max(dist)-min(dist))
#speed_normalized
#dist_normalized
plot(speed,dist,col="red")
thetas=predictTheta(speed,dist)
d=thetas[1]+15.5*thetas[2]
thetas
predicted_dist=thetas[1]+(speed*thetas[2])
points(speed,predicted_dist,type="o",col="blue")
#predicted_dist
print(c("Predicted distance for speed 15.5 mph:",d))
predictTheta=function(x,y){
theta_1=cov(x,y)/var(x)
theta_0=mean(y)-theta_1*mean(x)
return(c(theta_0,theta_1))
}
speed=cars[[1]]
dist=cars[[2]]
speed_normalized=(speed-mean(speed))/(max(speed)-min(speed))
dist_normalized=(dist-mean(dist))/(max(dist)-min(dist))
#speed_normalized
#dist_normalized
plot(speed_normalized,dist_normalized,col="red")
thetas=predictTheta(speed_normalized,dist_normalized)
d=thetas[1]+15.5*thetas[2]
thetas
predicted_dist=thetas[1]+(speed_normalized*thetas[2])
points(speed_normalized,predicted_dist,type="o",col="blue")
#predicted_dist
print(c("Predicted distance for speed 15.5 mph:",d))
predictTheta=function(x,y){
theta_1=cov(x,y)/var(x)
theta_0=mean(y)-theta_1*mean(x)
return(c(theta_0,theta_1))
}
speed=cars[[1]]
dist=cars[[2]]
speed_normalized=(speed-mean(speed))/(max(speed)-min(speed))
dist_normalized=(dist-mean(dist))/(max(dist)-min(dist))
speed_normalized
dist_normalized
plot(speed_normalized,dist_normalized,col="red")
thetas=predictTheta(speed_normalized,dist_normalized)
d=thetas[1]+15.5*thetas[2]
thetas
predicted_dist=thetas[1]+(speed_normalized*thetas[2])
points(speed_normalized,predicted_dist,type="o",col="blue")
#predicted_dist
print(c("Predicted distance for speed 15.5 mph:",d))
predictTheta=function(x,y){
theta_1=cov(x,y)/var(x)
theta_0=mean(y)-theta_1*mean(x)
return(c(theta_0,theta_1))
}
speed=cars[[1]]
dist=cars[[2]]
speed_normalized=(speed-mean(speed))/(max(speed)-min(speed))
dist_normalized=(dist-mean(dist))/(max(dist)-min(dist))
#speed_normalized
#dist_normalized
plot(speed,dist,col="red")
thetas=predictTheta(speed,dist)
d=thetas[1]+15.5*thetas[2]
thetas
predicted_dist=thetas[1]+(speed*thetas[2])
points(speed,predicted_dist,type="o",col="blue")
#predicted_dist
print(c("Predicted distance for speed 15.5 mph:",d))
predictTheta=function(x,y){
theta_1=cov(x,y)/var(x)
theta_0=mean(y)-theta_1*mean(x)
return(c(theta_0,theta_1))
}
speed=cars[[1]]
dist=cars[[2]]
speed_normalized=(speed-mean(speed))/(max(speed)-min(speed))
dist_normalized=(dist-mean(dist))/(max(dist)-min(dist))
#speed_normalized
#dist_normalized
plot(speed,dist,col="red")
thetas=predictTheta(speed,dist)
d=thetas[1]+15.5*thetas[2]
thetas
predicted_dist=thetas[1]+(speed*thetas[2])
points(speed,predicted_dist,type="o",col="blue")
predicted_dist
print(c("Predicted distance for speed 15.5 mph:",d))
predictTheta=function(x,y){
theta_1=cov(x,y)/var(x)
theta_0=mean(y)-theta_1*mean(x)
return(c(theta_0,theta_1))
}
speed=cars[[1]]
dist=cars[[2]]
speed_normalized=(speed-mean(speed))/(max(speed)-min(speed))
dist_normalized=(dist-mean(dist))/(max(dist)-min(dist))
#speed_normalized
#dist_normalized
plot(speed,dist,col="red")
thetas=predictTheta(speed,dist)
d=thetas[1]+15.5*thetas[2]
thetas
predicted_dist=thetas[1]+(speed*thetas[2])
points(speed,predicted_dist,type="o",col="blue")
print(c("Predicted distance for speed 15.5 mph:",d))
predictTheta=function(x,y){
theta_1=cov(x,y)/var(x)
theta_0=mean(y)-theta_1*mean(x)
return(c(theta_0,theta_1))
}
speed=cars[[1]]
dist=cars[[2]]
speed_normalized=(speed-mean(speed))/(max(speed)-min(speed))
dist_normalized=(dist-mean(dist))/(max(dist)-min(dist))
#speed_normalized
#dist_normalized
plot(speed_normalized,dist_normalized,col="red")
thetas=predictTheta(speed_normalized,dist_normalized)
d=thetas[1]+15.5*thetas[2]
thetas
predicted_dist=thetas[1]+(speed_normalized*thetas[2])
points(speed_normalized,predicted_dist,type="o",col="blue")
#predicted_dist
print(c("Predicted distance for speed_normalized 15.5 mph:",d))
predictTheta=function(x,y){
theta_1=cov(x,y)/var(x)
theta_0=mean(y)-theta_1*mean(x)
return(c(theta_0,theta_1))
}
speed=cars[[1]]
dist=cars[[2]]
speed_normalized=(speed-mean(speed))/(max(speed)-min(speed))
dist_normalized=(dist-mean(dist))/(max(dist)-min(dist))
#speed_normalized
#dist_normalized
plot(speed_normalized,dist_normalized,col="red")
thetas=predictTheta(speed_normalized,dist_normalized)
d=thetas[1]+15.5*thetas[2]
thetas
predicted_dist=thetas[1]+(speed_normalized*thetas[2])
points(speed_normalized,predicted_dist,type="o",col="blue")
predicted_dist
print(c("Predicted distance for speed_normalized 15.5 mph:",d))
plot(speed,dist,col="red")
thetas=predictTheta(speed,dist)
d=thetas[1]+15.5*thetas[2]
thetas
predicted_dist=thetas[1]+(speed*thetas[2])
points(speed,predicted_dist,type="o",col="blue")
print(c("Predicted distance for speed 15.5 mph:",d))
predictTheta=function(x,y){
theta_1=cov(x,y)/var(x)
theta_0=mean(y)-theta_1*mean(x)
return(c(theta_0,theta_1))
}
speed=cars[[1]]
dist=cars[[2]]
speed_normalized=(speed-mean(speed))/(max(speed)-min(speed))
dist_normalized=(dist-mean(dist))/(max(dist)-min(dist))
#speed_normalized
#dist_normalized
plot(speed,dist,col="red")
thetas=predictTheta(speed,dist)
d=thetas[1]+15.5*thetas[2]
thetas
predicted_dist=thetas[1]+(speed*thetas[2])
points(speed,predicted_dist,type="o",col="blue")
print(c("Predicted distance for speed 15.5 mph:",d))
predictTheta=function(x,y){
theta_1=cov(x,y)/var(x)
theta_0=mean(y)-theta_1*mean(x)
return(c(theta_0,theta_1))
}
speed=cars[[1]]
dist=cars[[2]]
speed_normalized=(speed-mean(speed))/(max(speed)-min(speed))
dist_normalized=(dist-mean(dist))/(max(dist)-min(dist))
# Question 13
speed_normalized
dist_normalized
# Question 14
plot(speed,dist,col="red")
thetas=predictTheta(speed,dist)
d=thetas[1]+15.5*thetas[2]
thetas
predicted_dist=thetas[1]+(speed*thetas[2])
points(speed,predicted_dist,type="o",col="blue")
print(c("Predicted distance for speed 15.5 mph:",d))
df=read.csv("linear_regression_data.csv")
for(learning_rate in c(2,1,0.5,0.25,0.125)){
print(c("Learning Rate:",as.character(learning_rate)))
theta_0=3
theta_1=1
for(i in seq(1,500)){
y_predicted=theta_0+theta_1*df[['x']]
theta_0=theta_0-((learning_rate/nrow(df))*sum(y_predicted-df[['y']]))
theta_1=theta_1-((learning_rate/nrow(df))*sum((y_predicted-df[['y']])*df[['x']]))
if(i%%50==0){
print(c('Iteration',i))
print(c("Theta_0",theta_0))
print(c("Theta_1",theta_1))
}
}
}
df=read.csv("linear_regression_data.csv")
result=function(x,y,x_input){
theta_1=cov(x,y)/var(x)
theta_0=mean(y)-theta_1*mean(x)
theta_0+theta_1*x_input
}
plot(df[['x']],df[['y']])
result(df[['x']],df[['y']],10)
predicted_y=c()
for(x in df[['x']]){
predicted_y=c(predicted_y,result(df[['x']],df[['y']],x))
}
# for adding data to plot
points(df[['x']],predicted_y,type="o")
df=read.csv("linear_regression_data.csv")
result=function(x,y,x_input){
theta_1=cov(x,y)/var(x)
theta_0=mean(y)-theta_1*mean(x)
theta_0+theta_1*x_input
}
plot(df[['x']],df[['y']])
result(df[['x']],df[['y']],10)
predicted_y=c()
for(x in df[['x']]){
predicted_y=c(predicted_y,result(df[['x']],df[['y']],x))
}
# for adding data to plot
points(df[['x']],predicted_y,type="o",col="yellow")
df=read.csv("linear_regression_data.csv")
result=function(x,y,x_input){
theta_1=cov(x,y)/var(x)
theta_0=mean(y)-theta_1*mean(x)
theta_0+theta_1*x_input
}
plot(df[['x']],df[['y']])
result(df[['x']],df[['y']],10)
predicted_y=c()
for(x in df[['x']]){
predicted_y=c(predicted_y,result(df[['x']],df[['y']],x))
}
# for adding data to plot
points(df[['x']],predicted_y,type="o",col="pink")
df=read.csv("linear_regression_data.csv")
result=function(x,y,x_input){
theta_1=cov(x,y)/var(x)
theta_0=mean(y)-theta_1*mean(x)
theta_0+theta_1*x_input
}
plot(df[['x']],df[['y']])
result(df[['x']],df[['y']],10)
predicted_y=c()
for(x in df[['x']]){
predicted_y=c(predicted_y,result(df[['x']],df[['y']],x))
}
# for adding data to plot
points(df[['x']],predicted_y,type="o",col="magenta")
df=read.csv("linear_regression_data.csv")
result=function(x,y,x_input){
theta_1=cov(x,y)/var(x)
theta_0=mean(y)-theta_1*mean(x)
theta_0+theta_1*x_input
}
plot(df[['x']],df[['y']],col="red")
result(df[['x']],df[['y']],10)
predicted_y=c()
for(x in df[['x']]){
predicted_y=c(predicted_y,result(df[['x']],df[['y']],x))
}
# for adding data to plot
points(df[['x']],predicted_y,type="o",col="blue")
df=read.csv("linear_regression_data.csv")
result=function(x,y,x_input){
theta_1=cov(x,y)/var(x)
theta_0=mean(y)-theta_1*mean(x)
theta_0+theta_1*x_input
}
plot(df[['x']],df[['y']],col="red",labx="x",laby="y")
result(df[['x']],df[['y']],10)
predicted_y=c()
for(x in df[['x']]){
predicted_y=c(predicted_y,result(df[['x']],df[['y']],x))
}
# for adding data to plot
points(df[['x']],predicted_y,type="o",col="blue")
?plot
df=read.csv("linear_regression_data.csv")
result=function(x,y,x_input){
theta_1=cov(x,y)/var(x)
theta_0=mean(y)-theta_1*mean(x)
theta_0+theta_1*x_input
}
plot(df[['x']],df[['y']],col="red",xlab="x",ylab="y")
result(df[['x']],df[['y']],10)
predicted_y=c()
for(x in df[['x']]){
predicted_y=c(predicted_y,result(df[['x']],df[['y']],x))
}
# for adding data to plot
points(df[['x']],predicted_y,type="o",col="blue")
predictTheta=function(x,y){
theta_1=cov(x,y)/var(x)
theta_0=mean(y)-theta_1*mean(x)
return(c(theta_0,theta_1))
}
speed=cars[[1]]
dist=cars[[2]]
speed_normalized=(speed-mean(speed))/(max(speed)-min(speed))
dist_normalized=(dist-mean(dist))/(max(dist)-min(dist))
# Question 13
speed_normalized
dist_normalized
# Question 14
plot(speed,dist,col="red")
thetas=predictTheta(speed,dist)
d=thetas[1]+15.5*thetas[2]
thetas
predicted_dist=thetas[1]+(speed*thetas[2])
points(speed,predicted_dist,type="o",col="blue")
print(c("Predicted distance for speed 15.5 mph:",d))
cars
plot(cars)
iris
plot(iris)
l=[1,2]
as.list(c(123,213))
c(as.list(23,23),as.list(35,12))
plot(c(as.list(23,23),as.list(35,12)))
as.data.frame(seq(1,7))
d=as.data.frame(seq(1,7))
d[1]
d[2]
d[2]=seq(1,7)
d
plot(d)
d[3]=seq(2,8)
d
plot(d)
d[4]=seq(3,9)
d
plot(d)
data=read.csv(file.choose(),header=TRUE)
par(mfrow=c(2,2))
y=data$x^3
plot(data$x,y,xlim = c(-2,2),ylim = c(-2,2))
y=(-data$x)^3
plot(data$x,y,xlim = c(-2,2),ylim = c(-2,2))
y=((2*data$x)-1)^3
plot(data$x,y,xlim = c(-2,2),ylim = c(-2,2))
y=(2*((data$x)^3))-1
plot(data$x,y,xlim = c(-2,2),ylim = c(-2,2))
data=read.csv("Q12.csv",header=TRUE)
par(mfrow=c(2,2))
y=data$x^3
plot(data$x,y,xlim = c(-2,2),ylim = c(-2,2))
y=(-data$x)^3
plot(data$x,y,xlim = c(-2,2),ylim = c(-2,2))
y=((2*data$x)-1)^3
plot(data$x,y,xlim = c(-2,2),ylim = c(-2,2))
y=(2*((data$x)^3))-1
plot(data$x,y,xlim = c(-2,2),ylim = c(-2,2))
?par
2**8
2^8
x=c(-2,2,0.1)
par(mfrow=c(2,2))
limit=c(-100,100)
plot(x,x**3,xlim = c(-2,2),ylim = c(-2,2))
plot(x,-x**3,xlim = c(-2,2),ylim = c(-2,2))
plot(x,(2*x-1)**3,xlim = c(-2,2),ylim = c(-2,2))
plot(x,2*x**3-1,xlim = c(-2,2),ylim = c(-2,2))
c(-2,2,0.1)
c(-2,2)
x=seq(-2,2,0.1)
par(mfrow=c(2,2))
limit=c(-100,100)
plot(x,x**3,xlim = c(-2,2),ylim = c(-2,2))
plot(x,-x**3,xlim = c(-2,2),ylim = c(-2,2))
plot(x,(2*x-1)**3,xlim = c(-2,2),ylim = c(-2,2))
plot(x,2*x**3-1,xlim = c(-2,2),ylim = c(-2,2))
x=seq(-2,2,0.1)
par(mfrow=c(2,2))
limit=c(-100,100)
plot(x,x**3,xlim = limit,ylim = limit)
plot(x,-x**3,xlim = limit,ylim = limit)
plot(x,(2*x-1)**3,xlim = limit,ylim = limit)
plot(x,2*x**3-1,xlim = limit,ylim = limit)
x=seq(-2,2,0.1)
par(mfrow=c(2,2))
limit=c(-10,10)
plot(x,x**3,xlim = limit,ylim = limit)
plot(x,-x**3,xlim = limit,ylim = limit)
plot(x,(2*x-1)**3,xlim = limit,ylim = limit)
plot(x,2*x**3-1,xlim = limit,ylim = limit)
x=seq(-2,2,0.1)
par(mfrow=c(2,2))
limit=c(-2,2)
plot(x,x**3,xlim = limit,ylim = limit)
plot(x,-x**3,xlim = limit,ylim = limit)
plot(x,(2*x-1)**3,xlim = limit,ylim = limit)
plot(x,2*x**3-1,xlim = limit,ylim = limit)
x=seq(-2,2,0.1)
par(mfrow=c(2,3))
limit=c(-2,2)
plot(x,x**3,xlim = limit,ylim = limit)
plot(x,-x**3,xlim = limit,ylim = limit)
plot(x,(2*x-1)**3,xlim = limit,ylim = limit)
plot(x,2*x**3-1,xlim = limit,ylim = limit)
x=seq(-2,2,0.1)
par(mfrow=c(2,2))
limit=c(-2,2)
plot(x,x**3,xlim = limit,ylim = limit)
plot(x,-x**3,xlim = limit,ylim = limit)
plot(x,(2*x-1)**3,xlim = limit,ylim = limit)
plot(x,2*x**3-1,xlim = limit,ylim = limit)
x=seq(-2,2,0.1)
par(mfcol=c(2,2))
limit=c(-2,2)
plot(x,x**3,xlim = limit,ylim = limit)
plot(x,-x**3,xlim = limit,ylim = limit)
plot(x,(2*x-1)**3,xlim = limit,ylim = limit)
plot(x,2*x**3-1,xlim = limit,ylim = limit)
x=seq(-2,2,0.1)
par(mfrow=c(2,2))
limit=c(-2,2)
plot(x,x**3,xlim = limit,ylim = limit)
plot(x,-x**3,xlim = limit,ylim = limit)
plot(x,(2*x-1)**3,xlim = limit,ylim = limit)
plot(x,2*x**3-1,xlim = limit,ylim = limit)
boston
Boston
housing
data()
BostonHousing
data(BostonHousing)
data("iris")
cars
