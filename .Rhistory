# install.packages("MASS");
library(MASS);
# 70% split
size=nrow(Boston)
split_index=floor(size*0.7)
size1=split_index
size2=size-split_index
# splitting
training_data=Boston[1:split_index,]
testing_data=Boston[split_index+1:size,]
rownames(testing_data)=NULL # to start indexing from 1 else it starts from split_index+1
testing_data=testing_data[1:size2,]
# creating model
y=training_data$medv;
x=training_data$lstat;
myModel=lm(y~x);
summary(myModel)
# predicting
result=predict(myModel,data.frame(testing_data$lstat))
# install.packages("MASS");
library(MASS);
# 70% split
size=nrow(Boston)
split_index=floor(size*0.7)
size1=split_index
size2=size-split_index
# splitting
training_data=Boston[1:split_index,]
testing_data=Boston[split_index+1:size,]
rownames(testing_data)=NULL # to start indexing from 1 else it starts from split_index+1
testing_data=testing_data[1:size2,]
# creating model
y=training_data$medv;
x=training_data$lstat;
myModel=lm(y~x);
# predicting
result=predict(myModel,data.frame(testing_data$lstat))
class(result)
?predict
?predict
# install.packages("MASS");
library(MASS);
# 70% split
size=nrow(Boston)
split_index=floor(size*0.7)
size1=split_index
size2=size-split_index
# splitting
training_data=Boston[1:split_index,]
testing_data=Boston[split_index+1:size,]
rownames(testing_data)=NULL # to start indexing from 1 else it starts from split_index+1
testing_data=testing_data[1:size2,]
# creating model
y=training_data$medv;
x=training_data$lstat;
myModel=lm(y~x);
# predicting
result=predict(myModel,data.frame(testing_data$lstat),se.fit = TRUE)
result
# install.packages("MASS");
library(MASS);
# 70% split
size=nrow(Boston)
split_index=floor(size*0.7)
size1=split_index
size2=size-split_index
# splitting
training_data=Boston[1:split_index,]
testing_data=Boston[split_index+1:size,]
rownames(testing_data)=NULL # to start indexing from 1 else it starts from split_index+1
testing_data=testing_data[1:size2,]
# creating model
y=training_data$medv;
x=training_data$lstat;
myModel=lm(y~x);
# predicting
result=predict(myModel,data.frame(testing_data$lstat),se.fit = FALSE)
result
# install.packages("MASS");
library(MASS);
# 70% split
size=nrow(Boston)
split_index=floor(size*0.7)
size1=split_index
size2=size-split_index
# splitting
training_data=Boston[1:split_index,]
testing_data=Boston[split_index+1:size,]
rownames(testing_data)=NULL # to start indexing from 1 else it starts from split_index+1
testing_data=testing_data[1:size2,]
# creating model
y=training_data$medv;
x=training_data$lstat;
x
myModel=lm(y~x);
# predicting
result=predict(myModel,data.frame(testing_data$lstat))
# install.packages("MASS");
library(MASS);
# 70% split
size=nrow(Boston)
split_index=floor(size*0.7)
size1=split_index
size2=size-split_index
# splitting
training_data=Boston[1:split_index,]
testing_data=Boston[split_index+1:size,]
rownames(testing_data)=NULL # to start indexing from 1 else it starts from split_index+1
testing_data=testing_data[1:size2,]
# creating model
y=training_data$medv;
x=training_data$lstat;
x
myModel=lm(y~x);
# predicting
result=predict(myModel,data.frame(testing_data$lstat))
# install.packages("MASS");
library(MASS);
# 70% split
size=nrow(Boston)
split_index=floor(size*0.7)
size1=split_index
size2=size-split_index
# splitting
training_data=Boston[1:split_index,]
testing_data=Boston[split_index+1:size,]
rownames(testing_data)=NULL # to start indexing from 1 else it starts from split_index+1
testing_data=testing_data[1:size2,]
# creating model
y=training_data$medv;
x=training_data$lstat;
x
myModel=lm(y~x);
# predicting
result=predict(myModel,data.frame(x=testing_data$lstat))
# install.packages("MASS");
library(MASS);
# 70% split
size=nrow(Boston)
split_index=floor(size*0.7)
size1=split_index
size2=size-split_index
# splitting
training_data=Boston[1:split_index,]
testing_data=Boston[split_index+1:size,]
rownames(testing_data)=NULL # to start indexing from 1 else it starts from split_index+1
testing_data=testing_data[1:size2,]
# creating model
y=training_data$medv;
x=training_data$lstat;
x
myModel=lm(y~x);
# predicting
result=predict(myModel,data.frame(x=testing_data$lstat))
# install.packages("MASS");
library(MASS);
# 70% split
size=nrow(Boston)
split_index=floor(size*0.7)
size1=split_index
size2=size-split_index
# splitting
training_data=Boston[1:split_index,]
testing_data=Boston[split_index+1:size,]
rownames(testing_data)=NULL # to start indexing from 1 else it starts from split_index+1
testing_data=testing_data[1:size2,]
# creating model
y=training_data$medv;
x=training_data$lstat;
x
myModel=lm(y~x);
# predicting
result=predict(myModel,data.frame(x=testing_data$lstat))
result
# install.packages("MASS");
library(MASS);
# 70% split
size=nrow(Boston)
split_index=floor(size*0.7)
size1=split_index
size2=size-split_index
# splitting
training_data=Boston[1:split_index,]
testing_data=Boston[split_index+1:size,]
rownames(testing_data)=NULL # to start indexing from 1 else it starts from split_index+1
testing_data=testing_data[1:size2,]
# creating model
y=training_data$medv;
x=training_data$lstat;
x
myModel=lm(y~x);
# predicting
data=data.frame(x=training_data$lstat);
result=predict(myModel,data)
result
# install.packages("MASS");
library(MASS);
# 70% split
size=nrow(Boston)
split_index=floor(size*0.7)
size1=split_index
size2=size-split_index
# splitting
training_data=Boston[1:split_index,]
testing_data=Boston[split_index+1:size,]
rownames(testing_data)=NULL # to start indexing from 1 else it starts from split_index+1
testing_data=testing_data[1:size2,]
# creating model
y=training_data$medv;
x=training_data$lstat;
x
myModel=lm(y~x);
# predicting
data=data.frame(x=training_data$lstat);
result=predict(myModel,data)
result
# install.packages("MASS");
library(MASS);
# 70% split
size=nrow(Boston)
split_index=floor(size*0.7)
size1=split_index
size2=size-split_index
# splitting
training_data=Boston[1:split_index,]
testing_data=Boston[split_index+1:size,]
rownames(testing_data)=NULL # to start indexing from 1 else it starts from split_index+1
testing_data=testing_data[1:size2,]
# creating model
y=training_data$medv;
x=training_data$lstat;
x
myModel=lm(y~x);
# predicting
data=data.frame(x=training_data$lstat);
result=predict(myModel,data)
result
# install.packages("MASS");
library(MASS);
# 70% split
size=nrow(Boston)
split_index=floor(size*0.7)
size1=split_index
size2=size-split_index
# splitting
training_data=Boston[1:split_index,]
testing_data=Boston[split_index+1:size,]
rownames(testing_data)=NULL # to start indexing from 1 else it starts from split_index+1
testing_data=testing_data[1:size2,]
# creating model
y=training_data$medv;
x=training_data$lstat;
x
myModel=lm(y~x);
# predicting
data=data.frame(x=training_data$lstat);
result=predict(myModel,data.frame(x=testing_data$lstat))
result
# install.packages("MASS");
library(MASS);
# 70% split
size=nrow(Boston)
split_index=floor(size*0.7)
size1=split_index
size2=size-split_index
# splitting
training_data=Boston[1:split_index,]
testing_data=Boston[split_index+1:size,]
rownames(testing_data)=NULL # to start indexing from 1 else it starts from split_index+1
testing_data=testing_data[1:size2,]
# creating model
y=training_data$medv;
x=training_data$lstat;
x
myModel=lm(y~x);
# predicting
data=data.frame(x=testing_data$lstat);
result=predict(myModel,data)
result
x=seq(-2,2,0.1)
par(mfrow=c(2,2))
limit=c(-2,2)
plot(x,x**3,xlim = limit,ylim = limit)
plot(x,-x**3,xlim = limit,ylim = limit)
plot(x,(2*x-1)**3,xlim = limit,ylim = limit)
plot(x,2*x**3-1,xlim = limit,ylim = limit)
predictTheta=function(x,y){
theta_1=cov(x,y)/var(x)
theta_0=mean(y)-theta_1*mean(x)
return(c(theta_0,theta_1))
}
speed=cars[[1]]
dist=cars[[2]]
speed_normalized=(speed-mean(speed))/(max(speed)-min(speed))
dist_normalized=(dist-mean(dist))/(max(dist)-min(dist))
# Question 13
speed_normalized
dist_normalized
# Question 14
plot(speed,dist,col="red")
thetas=predictTheta(speed,dist)
d=thetas[1]+15.5*thetas[2]
thetas
predicted_dist=thetas[1]+(speed*thetas[2])
points(speed,predicted_dist,type="o",col="blue")
print(c("Predicted distance for speed 15.5 mph:",d))
class(data)
class(result)
class(testing_data$lstat)
# install.packages("MASS");
library(MASS);
# 70% split
size=nrow(Boston)
split_index=floor(size*0.7)
size1=split_index
size2=size-split_index
# splitting
training_data=Boston[1:split_index,]
testing_data=Boston[split_index+1:size,]
rownames(testing_data)=NULL # to start indexing from 1 else it starts from split_index+1
testing_data=testing_data[1:size2,]
# creating model
y=training_data$medv;
x=training_data$lstat;
myModel=lm(y~x);
# predicting
data=data.frame(x=testing_data$lstat);
result=predict(myModel,data)
# plotting
par(mfrow=c(1,2));
plot(testing_data$lstat,testing_data$medv);
# install.packages("MASS");
library(MASS);
# 70% split
size=nrow(Boston)
split_index=floor(size*0.7)
size1=split_index
size2=size-split_index
# splitting
training_data=Boston[1:split_index,]
testing_data=Boston[split_index+1:size,]
rownames(testing_data)=NULL # to start indexing from 1 else it starts from split_index+1
testing_data=testing_data[1:size2,]
# creating model
y=training_data$medv;
x=training_data$lstat;
myModel=lm(y~x);
# predicting
data=data.frame(x=testing_data$lstat);
result=predict(myModel,data)
# plotting
par(mfrow=c(1,2));
plot(testing_data$lstat,testing_data$medv,col="red");
# install.packages("MASS");
library(MASS);
# 70% split
size=nrow(Boston)
split_index=floor(size*0.7)
size1=split_index
size2=size-split_index
# splitting
training_data=Boston[1:split_index,]
testing_data=Boston[split_index+1:size,]
rownames(testing_data)=NULL # to start indexing from 1 else it starts from split_index+1
testing_data=testing_data[1:size2,]
# creating model
y=training_data$medv;
x=training_data$lstat;
myModel=lm(y~x);
# predicting
data=data.frame(x=testing_data$lstat);
result=predict(myModel,data)
# plotting
par(mfrow=c(1,2));
plot(testing_data$lstat,testing_data$medv,col="red");
points(testing_data$lstat,result,ttype = "o",col="blue")
# install.packages("MASS");
library(MASS);
# 70% split
size=nrow(Boston)
split_index=floor(size*0.7)
size1=split_index
size2=size-split_index
# splitting
training_data=Boston[1:split_index,]
testing_data=Boston[split_index+1:size,]
rownames(testing_data)=NULL # to start indexing from 1 else it starts from split_index+1
testing_data=testing_data[1:size2,]
# creating model
y=training_data$medv;
x=training_data$lstat;
myModel=lm(y~x);
# predicting
data=data.frame(x=testing_data$lstat);
result=predict(myModel,data)
# plotting
par(mfrow=c(1,2));
plot(testing_data$lstat,testing_data$medv,col="red");
points(testing_data$lstat,result,type = "o",col="blue");
# install.packages("MASS");
library(MASS);
# 70% split
size=nrow(Boston)
split_index=floor(size*0.7)
size1=split_index
size2=size-split_index
# splitting
training_data=Boston[1:split_index,]
testing_data=Boston[split_index+1:size,]
rownames(testing_data)=NULL # to start indexing from 1 else it starts from split_index+1
testing_data=testing_data[1:size2,]
# creating model
y=training_data$medv;
x=training_data$lstat;
myModel=lm(y~x);
# predicting
data=data.frame(x=testing_data$lstat);
result=predict(myModel,data)
# plotting
par(mfrow=c(1,2));
plot(testing_data$lstat,testing_data$medv,col="red",xlab = "lstat",ylab="medv");
points(testing_data$lstat,result,type = "o",col="blue");
# install.packages("MASS");
library(MASS);
# 70% split
size=nrow(Boston)
split_index=floor(size*0.7)
size1=split_index
size2=size-split_index
# splitting
training_data=Boston[1:split_index,]
testing_data=Boston[split_index+1:size,]
rownames(testing_data)=NULL # to start indexing from 1 else it starts from split_index+1
testing_data=testing_data[1:size2,]
# creating model
y=training_data$medv;
x=training_data$lstat;
myModel=lm(y~x);
# predicting
data=data.frame(x=testing_data$lstat);
result=predict(myModel,data)
# plotting
par(mfrow=c(1,2));
plot(testing_data$lstat,result,col="red",xlab = "lstat",ylab="medv");
# install.packages("MASS");
library(MASS);
# 70% split
size=nrow(Boston)
split_index=floor(size*0.7)
size1=split_index
size2=size-split_index
# splitting
training_data=Boston[1:split_index,]
testing_data=Boston[split_index+1:size,]
rownames(testing_data)=NULL # to start indexing from 1 else it starts from split_index+1
testing_data=testing_data[1:size2,]
# creating model
y=training_data$medv;
x=training_data$lstat;
myModel=lm(y~x);
# predicting
data=data.frame(x=testing_data$lstat);
result=predict(myModel,data)
# plotting
par(mfrow=c(1,2));
plot(testing_data$lstat,result);
# install.packages("MASS");
library(MASS);
# 70% split
size=nrow(Boston)
split_index=floor(size*0.7)
size1=split_index
size2=size-split_index
# splitting
training_data=Boston[1:split_index,]
testing_data=Boston[split_index+1:size,]
rownames(testing_data)=NULL # to start indexing from 1 else it starts from split_index+1
testing_data=testing_data[1:size2,]
# creating model
y=training_data$medv;
x=training_data$lstat;
myModel=lm(y~x);
# predicting
data=data.frame(x=testing_data$lstat);
result=predict(myModel,data)
# plotting
par(mfrow=c(1,2));
plot(testing_data$medv,result);
plot()
# install.packages("MASS");
library(MASS);
# 70% split
size=nrow(Boston)
split_index=floor(size*0.7)
size1=split_index
size2=size-split_index
# splitting
training_data=Boston[1:split_index,]
testing_data=Boston[split_index+1:size,]
rownames(testing_data)=NULL # to start indexing from 1 else it starts from split_index+1
testing_data=testing_data[1:size2,]
# creating model
y=training_data$medv;
x=training_data$lstat;
myModel=lm(y~x);
# predicting
data=data.frame(x=testing_data$lstat);
result=predict(myModel,data)
# plotting
par(mfrow=c(1,2));
plot(testing_data$medv,result);
plot(testing_data$lstat,testing_data$medv)
